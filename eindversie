// Hier wordt het raster gemaakt
class Raster {
  constructor(r,k) {
    this.aantalRijen = r;
    this.aantalKolommen = k;
    this.celGrootte = null;
  }
  
  berekenCelGrootte() {
    this.celGrootte = canvas.width / this.aantalKolommen;
  }
  
  teken() {
    push();
    noFill();
    stroke('grey');
    for (var rij = 0;rij < this.aantalRijen;rij++) {
      for (var kolom = 0;kolom < this.aantalKolommen;kolom++) {
        rect(kolom*this.celGrootte,rij*this.celGrootte,this.celGrootte,this.celGrootte);
      }
    }
    pop();
  }
}

//Dit is de klasse van de speler. De speler begint rechts.
class Jos {
  constructor() {
    this.x = 0;
    this.y = 300;
    this.animatie = [];
    this.frameNummer =  3;
    this.stapGrootte = null;
    this.gehaald = false;
    this.levens = 1;
  }
  
  beweeg() {
    if (keyIsDown(65)) {
      this.x -= this.stapGrootte;
      this.frameNummer = 2;
    }
    if (keyIsDown(68)) {
      this.x += this.stapGrootte;
      this.frameNummer = 1;
    }
    if (keyIsDown(87)) {
      this.y -= this.stapGrootte;
      this.frameNummer = 4;
    }
    if (keyIsDown(83)) {
      this.y += this.stapGrootte;
      this.frameNummer = 5;
    }
    
    this.x = constrain(this.x,0,canvas.width);
    this.y = constrain(this.y,0,canvas.height - raster.celGrootte);
    
    if (this.x == canvas.width) {
      this.gehaald = true;
    }
  }
  
  wordtGeraakt(vijand) {
    if (this.x == vijand.x && this.y == vijand.y) {
      return true;
    }
    else {
      return false;
    }
  }
  
  toon() {
    image(this.animatie[this.frameNummer],this.x,this.y,raster.celGrootte,raster.celGrootte);
  }
  
// De code voor als je verliest.
verloren() {
  background('rgb(179,18,18)');
  fill('white');
  text('Je hebt verloren!',50,300);
  noLoop();
  }
  
//De code voor als je wint.
gewonnen() {
  background('green');
  fill('white');
  text("Je hebt gewonnen!",30,300);
  noLoop();
  }
}  

//Klasse van de vijand
class Vijand {
  constructor(x,y) {
    this.x = x;
    this.y = y;
    this.sprite = null;
    this.stapGrootte = null;
  }

  beweeg() {
    this.x += floor(random(-1,2))*this.stapGrootte;
    this.y += floor(random(-1,2))*this.stapGrootte;

    this.x = constrain(this.x,0,canvas.width - raster.celGrootte);
    this.y = constrain(this.y,0,canvas.height - raster.celGrootte);
  }
  
  toon() {
    image(this.sprite,this.x,this.y,raster.celGrootte,raster.celGrootte);
  }
}

//De bommen
class Bom {
  constructor () {
    this.x = floor(random(10, raster.aantalKolommen)) * raster.celGrootte;
    this.y = floor(random(0, raster.aantalKolommen)) * raster.celGrootte;
    this.sprite = bomAfbeelding;
    this.stapGrootte = raster.celGrootte;
    this.richting = -1;
    this.snelheid = null;

  }

  beweeg() {
    this.y += this.richting * this.snelheid * this.stapGrootte;

    if (this.y <= 0) {
      this.richting = 1;
    } 
    else if (this.y >= canvas.height - raster.celGrootte) {
      this.richting = -1;
    }
    
    this.x = constrain(this.x,0,canvas.width - raster.celGrootte);
    this.y = constrain(this.y,0,canvas.height - raster.celGrootte);
  }

  toon() {
    image(this.sprite,this.x,this.y,raster.celGrootte,raster.celGrootte);
  }
}

//De array waar de bommen in komen
var bommen = [];

// De groene appel
var appel1 = {
  sprite: null,
  x: null,
  y: null,
  opgegeten: false,
  stapGrootte: null,
  richtingx: 1,
  richtingy: 1,
  
  beweeg() {
    
    this.x += raster.celGrootte * this.richtingx;
    this.y += raster.celGrootte * this.richtingy;
    
    if (this.y == canvas.height - raster.celGrootte) {
      this.richtingy = -1;
    }
    
    if (this.y == 0) {
      this.richtingy = 1;
    }
    
    if (this.x == canvas.width - raster.celGrootte) {
      this.richtingx = -1;
    }
    
    if (this.x == 0) {
      this.richtingx = 1;
    }
    
  },
  
  toon() { 
    image(this.sprite,this.x,this.y,raster.celGrootte,raster.celGrootte);
  }
  
};

// De rode appel
var appel2 = {
  sprite: null,
  x: null,
  y: null,
  opgegeten: false
};

//Dit zijn de lichtblauwe balken waarmee de achtergrond verandert wordt.
class balken {
  constructor(x,y,width,height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  toon() {
    push();
    fill("lightblue");
    rect(this.x,this.y,this.width,this.height);
    pop();
  }
}

//Hier wordt de timer gemaakt
class Tijd {
 constructor() {
    this.deciseconden = null;
  }
  
  toon() {
    push();
    textSize(20);
    text("Tijd:" + this.deciseconden + " ds",10,50);
    pop();
  }
  
  aftellen() {
    this.deciseconden -= 1;
  }

//Het verlies wanneer de timer op is.
 verloren() {
  background('rgb(179,18,18)');
  fill('white');
  text('Je hebt verloren!',50,300);
   push();
   fill('white');
   textSize(40);
   text('De tijd is om!', 275, 375);
   pop();
  noLoop();
 }
  
}
  
function preload() {
  brug = loadImage("images/backgrounds/dame_op_brug_1800.jpg");
  bomAfbeelding = loadImage("images/sprites/bom_100px.png");
  lily = loadImage("images/backgrounds/lily.jpg");
  zebrapad = loadImage("images/backgrounds/zebrapad.jpg");
  duimpje = loadImage("images/backgrounds/thumbsUp.jfif");
}

function setup() {
  canvas = createCanvas(900,600);
  canvas.parent();
  frameRate(10);
  textFont("Verdana");
  textSize(90);
  
  raster = new Raster(12,18);
  
  raster.berekenCelGrootte();
  
  kolomBlauw = new balken(raster.celGrootte * floor(random() * raster.aantalKolommen),0,raster.celGrootte,canvas.height);
  rijBlauw = new balken(0, raster.celGrootte * floor(random() * raster.aantalRijen),canvas.width,raster.celGrootte);

//Hier wordt de speler aangepast.
  eve = new Jos();
  eve.stapGrootte = 1*raster.celGrootte;
  for (var b = 0;b < 6;b++) {
    frameEve = loadImage("images/sprites/Eve100px/Eve_" + b + ".png");
    eve.animatie.push(frameEve);
  }

//Alice en Bob zijn de twee roze vijanden die door het veld stuiteren
  alice = new Vijand(700,200);
  alice.stapGrootte = 1*eve.stapGrootte;
  alice.sprite = loadImage("images/sprites/Alice100px/Alice.png");

  bob = new Vijand(600,400);
  bob.stapGrootte = 1*eve.stapGrootte;
  bob.sprite = loadImage("images/sprites/Bob100px/Bob.png");  
  
  
//Hier wordt alles voor de bewegende appel bepaalt.
  appel1.stapGrootte = 1*raster.celGrootte;
  appel1.x = raster.celGrootte*floor(random() * raster.aantalKolommen);
  appel1.y = raster.celGrootte*floor(random() * raster.aantalRijen);
  appel1.sprite = loadImage("images/sprites/appel_1.png")
  
//Dit is de rode appel
  appel2.x = raster.celGrootte*floor(random() * raster.aantalKolommen);
  appel2.y = raster.celGrootte*floor(random() * raster.aantalRijen);
  appel2.sprite = loadImage("images/sprites/appel_2.png")
  
//De bommen worden gemaakt en  meteen in de array gezet.
  for (var n = 0; n < 5; n++) {
   bommen.push(new Bom());
 }

// Elke bom heeft een andere snelheid.
for (n=0;n < 5;n++) {
  bommen[n].snelheid = n+1
}

//De hoeveelheid decisecondes worden hier bepaald.
  timer = new Tijd();
    timer.deciseconden = 300
}

function draw() {
  background(brug);
  
//De balken worden hier getoont.
  kolomBlauw.toon();
  rijBlauw.toon();
  
//We kozen om drie verschillende achtergronden te gebruiken, gebaseert op waar op de lichtblauwe balken de muis wordt gehouden
//Gewoon omdat het leuk is.
//De Kolom heeft een waterlily (vonden we mooi).
   if ( mouseX >= kolomBlauw.x && mouseX <= kolomBlauw.x + raster.celGrootte) {
    background(lily);
  }
//De rij heeft een zebrapad (omdat het doe van het spel is om naar de overkant te komen).
  if ( mouseY >= rijBlauw.y && mouseY <= rijBlauw.y + raster.celGrootte ) {
    background(zebrapad);
  }
//Waar ze elkaar kruizen is een duimpje omhoog (omdat het een soort easteregg is).
  if ( mouseY >= rijBlauw.y && mouseY <= rijBlauw.y + raster.celGrootte && mouseX >= kolomBlauw.x && mouseX <= kolomBlauw.x + raster.celGrootte) {
    background(duimpje);
  }

//Het raster en de timer wordt hier getekend en geactiveerd.
    raster.teken();
    timer.toon();
    timer.aftellen();

//De appels verdwijnen wanneer ze opgegeten zijn
   if (!appel1.opgegeten) {
      image(appel1.sprite, appel1.x, appel1.y, raster.celGrootte, raster.celGrootte);
  }
  
  if (!appel2.opgegeten) {
      image(appel2.sprite, appel2.x, appel2.y, raster.celGrootte, raster.celGrootte);
  }

  //De tekst die laat zien hoeveel levens je hebt
  push();
    textSize(20);
    text("Aantal levens:" +  eve.levens,10,25);
  pop();
  
//Alles dat beweegt wordt geactiveert.
  eve.beweeg();
  alice.beweeg();
  bob.beweeg();
  appel1.beweeg();
  
//Alles wat nog niet getoont was wordt hier getoont.
  eve.toon();
  alice.toon();
  bob.toon();
  
//loop waar alle bommen gaan bewegen en getoont worden.
  for (n=0;n < 5;n++)
{
     bommen[n].beweeg();
     bommen[n].toon();
  }
  
//De manieren waarop de speler een leven kan verliezen.
  if (eve.wordtGeraakt(alice) || eve.wordtGeraakt(bob) || eve.wordtGeraakt(bommen[0]) || eve.wordtGeraakt(bommen[1]) || eve.wordtGeraakt(bommen[2]) || eve.wordtGeraakt(bommen[3]) || eve.wordtGeraakt(bommen[4])) {
      eve.levens --;
    }

//Je krijgt levens erbij wanneer je de appels opeet
  if (eve.x == appel1.x && eve.y == appel1.y && !appel1.opgegeten) {
    eve.levens += 1;
    appel1.opgegeten = true;
  }
  
  if (eve.x == appel2.x && eve.y == appel2.y && !appel2.opgegeten) {
    eve.levens += 1;
    appel2.opgegeten = true;
  } 
  
  //Als je geen levens meer hebt, verlies je
  if (eve.levens <= 0) {
    eve.verloren()
  }
  
  //Als je er te lang over doet, verlies je.
  if (timer.deciseconden <= 0) {
    timer.verloren()
  }
  
  //Als je binnen de tijd de rechterkant haalt heb je gewonnen
  if (eve.gehaald) {
   eve.gewonnen()
  }
}
